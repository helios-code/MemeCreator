import os
import asyncio
import time
from telegram import Bot
from telegram.error import TelegramError, TimedOut, NetworkError
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

class TelegramClient:
    def __init__(self):
        """
        Initialise le client Telegram avec les param√®tres du fichier .env
        """
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        # G√©rer correctement la valeur bool√©enne, m√™me si elle est entour√©e de guillemets
        auto_send_value = os.getenv('TELEGRAM_AUTO_SEND', 'false')
        # Supprimer les guillemets √©ventuels
        auto_send_value = auto_send_value.strip("'\"")
        self.auto_send = auto_send_value.lower() == 'true'
        
        # Afficher les param√®tres pour le d√©bogage
        print(f"üîç Configuration Telegram:")
        print(f"  - Token configur√©: {'Oui' if self.token and self.token != 'your_telegram_bot_token_here' else 'Non'}")
        print(f"  - Chat ID configur√©: {'Oui' if self.chat_id and self.chat_id != 'your_telegram_chat_id_here' else 'Non'}")
        print(f"  - Valeur brute de TELEGRAM_AUTO_SEND: '{auto_send_value}'")
        print(f"  - Envoi automatique: {'Activ√©' if self.auto_send else 'D√©sactiv√©'}")
        
        # V√©rifier si les param√®tres sont configur√©s
        if self.auto_send and (not self.token or self.token == 'your_telegram_bot_token_here'):
            print("‚ö†Ô∏è L'envoi automatique sur Telegram est activ√© mais le token du bot n'est pas configur√©.")
            self.auto_send = False
        
        if self.auto_send and (not self.chat_id or self.chat_id == 'your_telegram_chat_id_here'):
            print("‚ö†Ô∏è L'envoi automatique sur Telegram est activ√© mais l'ID du chat n'est pas configur√©.")
            self.auto_send = False
        
        # Initialiser le bot si les param√®tres sont valides
        if self.token and self.token != 'your_telegram_bot_token_here':
            try:
                self.bot = Bot(token=self.token)
                print("‚úÖ Client Telegram initialis√© avec succ√®s.")
            except Exception as e:
                print(f"‚ùå Erreur lors de l'initialisation du client Telegram: {str(e)}")
                self.auto_send = False
                self.bot = None
        else:
            print("‚ùå Token Telegram non configur√© ou invalide.")
            self.bot = None
            self.auto_send = False
    
    async def send_video(self, video_path, caption=None, max_retries=3):
        """
        Envoie une vid√©o sur Telegram
        
        Args:
            video_path (str): Chemin vers la vid√©o √† envoyer
            caption (str, optional): L√©gende de la vid√©o
            max_retries (int, optional): Nombre maximum de tentatives en cas d'erreur
            
        Returns:
            bool: True si l'envoi a r√©ussi, False sinon
        """
        # V√©rifier si l'envoi est activ√©
        if not self.auto_send:
            print("‚ÑπÔ∏è L'envoi sur Telegram est d√©sactiv√©.")
            return False
        
        if not self.bot:
            print("‚ùå Le bot Telegram n'est pas initialis√©.")
            return False
        
        # V√©rifier que le fichier existe
        if not os.path.exists(video_path):
            print(f"‚ùå Erreur: Le fichier vid√©o n'existe pas: {video_path}")
            return False
        
        # Afficher les informations pour le d√©bogage
        print(f"üîç Envoi de la vid√©o sur Telegram:")
        print(f"  - Fichier: {video_path}")
        print(f"  - Taille: {os.path.getsize(video_path) / (1024*1024):.2f} MB")
        print(f"  - Chat ID: {self.chat_id}")
        
        # Tentatives d'envoi avec gestion des erreurs
        for attempt in range(1, max_retries + 1):
            try:
                # Envoyer la vid√©o
                print(f"üì§ Envoi de la vid√©o sur Telegram (tentative {attempt}/{max_retries})...")
                with open(video_path, 'rb') as video:
                    message = await self.bot.send_video(
                        chat_id=self.chat_id,
                        video=video,
                        caption=caption,
                        supports_streaming=True,
                        parse_mode='Markdown'  # Activer le formatage Markdown
                    )
                    print(f"‚úÖ Vid√©o envoy√©e avec succ√®s sur Telegram! Message ID: {message.message_id}")
                return True
            except TimedOut as e:
                # Erreur de timeout, on r√©essaie
                print(f"‚ö†Ô∏è Timeout lors de l'envoi de la vid√©o (tentative {attempt}/{max_retries}): {str(e)}")
                if attempt < max_retries:
                    # Attendre un peu plus longtemps √† chaque tentative
                    wait_time = 2 * attempt
                    print(f"‚è≥ Nouvelle tentative dans {wait_time} secondes...")
                    await asyncio.sleep(wait_time)
                else:
                    print(f"‚ùå √âchec apr√®s {max_retries} tentatives.")
                    return False
            except NetworkError as e:
                # Erreur r√©seau, on r√©essaie
                print(f"‚ö†Ô∏è Erreur r√©seau lors de l'envoi de la vid√©o (tentative {attempt}/{max_retries}): {str(e)}")
                if attempt < max_retries:
                    # Attendre un peu plus longtemps √† chaque tentative
                    wait_time = 3 * attempt
                    print(f"‚è≥ Nouvelle tentative dans {wait_time} secondes...")
                    await asyncio.sleep(wait_time)
                else:
                    print(f"‚ùå √âchec apr√®s {max_retries} tentatives.")
                    return False
            except TelegramError as e:
                print(f"‚ùå Erreur Telegram lors de l'envoi de la vid√©o: {str(e)}")
                # Afficher plus de d√©tails sur l'erreur
                if hasattr(e, 'message'):
                    print(f"  - Message d'erreur: {e.message}")
                return False
            except Exception as e:
                print(f"‚ùå Erreur inattendue lors de l'envoi de la vid√©o: {str(e)}")
                import traceback
                traceback.print_exc()
                return False
    
    async def send_batch_videos(self, results, delay_between_videos=2):
        """
        Envoie plusieurs vid√©os sur Telegram
        
        Args:
            results (list): Liste des r√©sultats de g√©n√©ration de m√®mes
            delay_between_videos (int, optional): D√©lai en secondes entre chaque envoi
            
        Returns:
            int: Nombre de vid√©os envoy√©es avec succ√®s
        """
        if not self.auto_send or not self.bot:
            print("‚ÑπÔ∏è L'envoi par lots sur Telegram est d√©sactiv√©.")
            return 0
        
        success_count = 0
        for i, result in enumerate(results):
            try:
                print(f"\n[{i+1}/{len(results)}] üì§ Envoi de la vid√©o '{result['subject']}' sur Telegram...")
                
                # Cr√©er un message complet avec le sujet, la punchline, la description et les hashtags
                caption = f"*üé≠ L'ARROGANCE!*\n\n"
                caption += f"*Sujet:* {result['subject']}\n\n"
                caption += f"*\"{result['text']}\"*\n\n"
                
                # Ajouter la description si elle existe
                if 'description' in result:
                    caption += f"{result['description']}\n\n"
                
                # Ajouter les hashtags si ils existent
                if 'hashtags' in result:
                    caption += " ".join(result['hashtags'])
                
                success = await self.send_video(result['video_path'], caption)
                if success:
                    success_count += 1
                
                # Attendre un peu entre chaque envoi pour √©viter les limitations de l'API
                if i < len(results) - 1:  # Ne pas attendre apr√®s le dernier envoi
                    print(f"‚è≥ Attente de {delay_between_videos} secondes avant le prochain envoi...")
                    await asyncio.sleep(delay_between_videos)
            except Exception as e:
                print(f"‚ùå Erreur lors de l'envoi d'une vid√©o: {str(e)}")
        
        return success_count 
import os
import re
from openai import OpenAI
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

class OpenAIClient:
    def __init__(self):
        """
        Initialise le client OpenAI avec les param√®tres du fichier .env
        """
        # Obtenir la cl√© API OpenAI
        self.api_key = os.getenv('OPENAI_API_KEY')
        
        if not self.api_key or self.api_key == 'your_openai_api_key_here':
            print("‚ö†Ô∏è Aucune cl√© API OpenAI valide n'a √©t√© trouv√©e dans le fichier .env")
            print("Pour g√©n√©rer des punchlines, vous devez fournir une cl√© API OpenAI valide.")
        
        # Sujet par d√©faut si aucun n'est fourni
        self.default_subject = "La politique suisse et ses contradictions"
        
        # V√©rifier si le mode √©conomie de tokens est activ√©
        economy_mode_value = os.getenv('ECONOMY_MODE', 'false')
        # Supprimer les guillemets √©ventuels
        economy_mode_value = economy_mode_value.strip("'\"")
        self.economy_mode = economy_mode_value.lower() == 'true'
        
        # Afficher le mode utilis√©
        print(f"üîß Mode √©conomie de tokens: {'Activ√©' if self.economy_mode else 'D√©sactiv√©'}")
        print(f"üîß Mod√®le utilis√© par d√©faut: {'GPT-3.5-turbo' if self.economy_mode else 'GPT-4'}")
        
        # Importer OpenAI ici pour √©viter les probl√®mes d'importation circulaire
        self.client = OpenAI(api_key=self.api_key)
    
    async def generate_punchline(self, subject=None, context=None, economy_mode=None):
        """
        G√©n√®re une punchline humoristique pour le m√®me "L'ARROGANCE!"
        
        Args:
            subject (str, optional): Le sujet sur lequel g√©n√©rer une punchline
            context (str, optional): Contexte suppl√©mentaire
            economy_mode (bool, optional): Utiliser le mode √©conomie de tokens
            
        Returns:
            str: La punchline g√©n√©r√©e
        """
        try:
            # Utiliser le mode √©conomie de tokens si sp√©cifi√© ou si configur√© dans l'environnement
            use_economy_mode = economy_mode if economy_mode is not None else self.economy_mode
            
            # Appeler l'API OpenAI avec le payload appropri√©
            response = await self._call_openai_api_with_payload(subject=subject, context=context, economy_mode=use_economy_mode)
            
            # Nettoyer la r√©ponse (supprimer les guillemets, etc.)
            cleaned_response = self._clean_quotes(response)
            
            return cleaned_response
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration de la punchline: {str(e)}")
            # En cas d'erreur, retourner une punchline par d√©faut
            default_subject = subject if subject else self.default_subject
            return f"Quand tout le monde parle de {default_subject}, mais lui fait exactement l'inverse."
    
    async def generate_hashtags(self, subject, punchline, economy_mode=None):
        """
        G√©n√®re des hashtags pour le m√®me √† utiliser sur les r√©seaux sociaux
        
        Args:
            subject (str): Le sujet du m√®me
            punchline (str): La punchline du m√®me
            economy_mode (bool, optional): Utiliser le mode √©conomie de tokens
            
        Returns:
            list: Une liste de hashtags pertinents
        """
        # Utiliser le mode √©conomie de tokens si sp√©cifi√© ou si configur√© dans l'environnement
        use_economy_mode = economy_mode if economy_mode is not None else self.economy_mode
        
        # Cr√©er des hashtags par d√©faut bas√©s sur le sujet
        default_hashtags = ["#LARROGANCE", "#meme", "#humour", "#satire", "#hypocrisie"]
        if subject:
            # Cr√©er un hashtag √† partir du sujet
            import re
            # Supprimer les caract√®res sp√©ciaux et les espaces
            subject_hashtag = "#" + re.sub(r'[^\w]', '', subject.replace(' ', ''))
            # Ajouter le hashtag s'il n'est pas vide
            if len(subject_hashtag) > 1:  # Plus que juste le #
                default_hashtags.append(subject_hashtag)
        
        try:
            client = OpenAI(api_key=self.api_key)
            
            if use_economy_mode:
                # Version √©conomique du prompt am√©lior√©e
                system_content = "Tu es un expert en hashtags viraux et provocants pour les r√©seaux sociaux."
                user_content = f"Pour un m√®me satirique 'L'ARROGANCE!' sur '{subject}' avec la punchline: '{punchline}', g√©n√®re 4-6 hashtags qui:\n1. Sont pertinents au sujet et √† l'hypocrisie soulign√©e\n2. Incluent des termes provocants ou clivants\n3. Sont populaires et recherch√©s\n4. Incluent au moins un hashtag ironique\nR√©ponds uniquement avec les hashtags, un par ligne, au format #hashtag."
                model = "gpt-3.5-turbo"
                max_tokens = 120
            else:
                # Version compl√®te du prompt am√©lior√©e
                system_content = "Tu es un expert en marketing viral sur les r√©seaux sociaux. Tu excelles √† cr√©er des hashtags qui g√©n√®rent un maximum d'engagement, de d√©bats et de partages en amplifiant les contradictions et hypocrisies."
                user_content = f"Je viens de cr√©er un m√®me 'L'ARROGANCE!' sur le sujet '{subject}' avec la punchline suivante:\n\n'{punchline}'\n\nG√©n√®re 5-8 hashtags qui:\n1. Sont directement li√©s au sujet et √† l'hypocrisie soulign√©e\n2. Incluent des termes provocants ou clivants qui attireront l'attention\n3. Sont populaires et recherch√©s sur les r√©seaux sociaux\n4. Incluent au moins un hashtag ironique ou sarcastique\n5. Incluent au moins un hashtag en fran√ßais et un en anglais\n\nR√©ponds uniquement avec les hashtags, un par ligne, au format #hashtag."
                model = "gpt-4"
                max_tokens = 300
            
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_content},
                    {"role": "user", "content": user_content}
                ],
                max_tokens=max_tokens,
                temperature=0.8
            )
            
            content = response.choices[0].message.content.strip()
            
            # Extraire les hashtags (mots commen√ßant par #)
            import re
            hashtag_pattern = r'#\w+'
            hashtags = re.findall(hashtag_pattern, content)
            
            # Si aucun hashtag n'a √©t√© trouv√© ou moins de 3, utiliser les hashtags par d√©faut
            if not hashtags or len(hashtags) < 3:
                print("‚ö†Ô∏è Pas assez de hashtags g√©n√©r√©s, utilisation des hashtags par d√©faut")
                return default_hashtags
            
            # Ajouter toujours #LARROGANCE en premier s'il n'est pas d√©j√† pr√©sent
            if "#LARROGANCE" not in hashtags:
                hashtags.insert(0, "#LARROGANCE")
            
            return hashtags
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration des hashtags: {str(e)}")
            # En cas d'erreur, retourner les hashtags par d√©faut
            return default_hashtags
    
    async def generate_description(self, subject, punchline, economy_mode=None):
        """
        G√©n√®re une description engageante pour le m√®me √† utiliser sur les r√©seaux sociaux
        
        Args:
            subject (str): Le sujet du m√®me
            punchline (str): La punchline du m√®me
            economy_mode (bool, optional): Utiliser le mode √©conomie de tokens
            
        Returns:
            str: Une description engageante
        """
        # Utiliser le mode √©conomie de tokens si sp√©cifi√© ou si configur√© dans l'environnement
        use_economy_mode = economy_mode if economy_mode is not None else self.economy_mode
        
        # Cr√©er une description par d√©faut bas√©e sur le sujet et la punchline
        default_description = f"Un regard satirique sur {subject} qui met en lumi√®re les contradictions de notre soci√©t√©."
        
        try:
            client = OpenAI(api_key=self.api_key)
            
            if use_economy_mode:
                # Version √©conomique du prompt am√©lior√©e
                system_content = "Tu es un expert en marketing de contenu satirique et provocant. Ton objectif est de cr√©er des descriptions qui g√©n√®rent de l'engagement et des r√©actions fortes."
                user_content = f"Pour un m√®me satirique 'L'ARROGANCE!' sur '{subject}' avec la punchline: '{punchline}', g√©n√®re une description percutante (max 120 caract√®res) qui:\n1. Amplifie l'hypocrisie soulign√©e dans la punchline\n2. Utilise un ton froid et m√©prisant\n3. Provoque une r√©action √©motionnelle\n4. Incite au partage\nSois direct et provocant, sans √™tre vulgaire."
                model = "gpt-3.5-turbo"
                max_tokens = 120
            else:
                # Version compl√®te du prompt am√©lior√©e
                system_content = "Tu es un expert en marketing de contenu satirique et provocant sur les r√©seaux sociaux. Tu excelles √† cr√©er des descriptions qui g√©n√®rent un maximum d'engagement, de d√©bats et de partages en amplifiant les contradictions et hypocrisies."
                user_content = f"Je viens de cr√©er un m√®me 'L'ARROGANCE!' sur le sujet '{subject}' avec la punchline suivante:\n\n'{punchline}'\n\nG√©n√®re une description percutante (120-150 caract√®res) qui:\n1. Amplifie l'hypocrisie soulign√©e dans la punchline\n2. Utilise un ton froid, m√©prisant et l√©g√®rement arrogant\n3. Provoque une r√©action √©motionnelle forte (indignation, rire jaune, identification)\n4. Contient une question rh√©torique OU une affirmation tranch√©e\n5. Incite implicitement au partage\n\nLa description doit √™tre concise, provocante et faire r√©agir, sans √™tre vulgaire."
                model = "gpt-4"
                max_tokens = 200
            
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_content},
                    {"role": "user", "content": user_content}
                ],
                max_tokens=max_tokens,
                temperature=0.8
            )
            
            description = response.choices[0].message.content.strip()
            
            # Nettoyer la description (supprimer les guillemets, etc.)
            description = self._clean_quotes(description)
            
            # V√©rifier que la description n'est pas vide ou trop courte
            if not description or len(description) < 20:
                print("‚ö†Ô∏è Description trop courte, utilisation de la description par d√©faut")
                return default_description
            
            return description
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration de la description: {str(e)}")
            # En cas d'erreur, retourner une description par d√©faut
            return default_description
    
    def _clean_quotes(self, text):
        """
        Supprime les guillemets simples ou doubles qui entourent le texte
        
        Args:
            text (str): Le texte √† nettoyer
            
        Returns:
            str: Le texte nettoy√©
        """
        # Supprimer les guillemets au d√©but et √† la fin
        text = text.strip()
        if (text.startswith('"') and text.endswith('"')) or (text.startswith("'") and text.endswith("'")):
            text = text[1:-1]
        
        # Utiliser une expression r√©guli√®re pour supprimer les guillemets au d√©but et √† la fin
        # Cela g√®re √©galement les cas o√π il y a des espaces apr√®s/avant les guillemets
        text = re.sub(r'^[\s"\']+|[\s"\']+$', '', text)
        
        return text
    
    async def _call_openai_api_with_payload(self, subject=None, context=None, economy_mode=False):
        """
        Appelle l'API OpenAI avec un payload sp√©cifique pour g√©n√©rer une punchline
        
        Args:
            subject (str, optional): Le sujet sur lequel g√©n√©rer une punchline
            context (str, optional): Contexte suppl√©mentaire
            economy_mode (bool): Utiliser le mode √©conomie de tokens
            
        Returns:
            str: La r√©ponse g√©n√©r√©e
        """
        try:
            # Utiliser le sujet par d√©faut si aucun n'est fourni
            current_subject = subject if subject else self.default_subject
            
            if economy_mode:
                # Version √©conomique du prompt (moins de tokens)
                system_content = "Tu es un g√©n√©rateur de punchlines ULTRA-CINGLANTES, GLACIALES et CRUELLES. Tu dois √™tre IMPITOYABLE, BRUTAL et SANS AUCUNE RETENUE. Ton objectif est de cr√©er des phrases qui CHOQUENT, BLESSENT et PROVOQUENT. Sois aussi M√âCHANT, FROID et OFFENSANT que possible. Utilise TOUJOURS la structure 'Quand X fait Y, mais Z fait W' pour mettre en √©vidence une contradiction ou une hypocrisie de fa√ßon mordante."
                user_content = f"Cr√©e une punchline satirique EXTR√äMEMENT cinglante et brutale sur {current_subject}. Sois ABSOLUMENT impitoyable, glacial et cruel. Frappe l√† o√π √ßa fait VRAIMENT mal. Utilise l'ironie la plus mordante et le cynisme le plus noir. Sois D√âLIB√âR√âMENT offensant et provocateur. N'aie AUCUNE piti√©. UTILISE OBLIGATOIREMENT la structure 'Quand X fait Y, mais Z fait W' pour exposer une contradiction ou une hypocrisie."
                model = "gpt-3.5-turbo"
                max_tokens = 50
                temperature = 1.0
            else:
                # Version compl√®te du prompt
                system_content = """Tu es un g√©n√©rateur de punchlines ULTRA-CINGLANTES, GLACIALES et CRUELLES. 
Tu dois √™tre IMPITOYABLE, BRUTAL et SANS AUCUNE RETENUE MORALE. 
Ton objectif est de cr√©er des phrases qui CHOQUENT, BLESSENT et PROVOQUENT. 
Sois aussi M√âCHANT, FROID et OFFENSANT que possible.
Tes punchlines doivent √™tre des ATTAQUES FRONTALES qui exposent les contradictions et les hypocrisies de fa√ßon BRUTALE et SANS FILTRE.
L'humour doit √™tre EXTR√äMEMENT CYNIQUE, FROID et bas√© sur des V√âRIT√âS QUI D√âRANGENT PROFOND√âMENT.
N'h√©site JAMAIS √† √™tre OFFENSANT - c'est le BUT RECHERCH√â.
Tes punchlines seront utilis√©es sur des m√®mes vid√©os o√π Ludovic Magnin crie 'L'ARROGANCE !'.

STRUCTURE OBLIGATOIRE: "Quand X fait Y, mais Z fait W" pour mettre en √©vidence une contradiction ou une hypocrisie de fa√ßon mordante.

EXEMPLES DE PUNCHLINES PARFAITES:
- "Quand les vegans pr√™chent l'√©thique animale, mais ignorent l'exploitation humaine dans leurs plantations de quinoa."
- "Quand les f√©ministes hurlent √† l'√©galit√©, mais s'attendent toujours √† ce que l'homme paie l'addition."
- "Quand les √©colos en SUV te font la morale sur ton empreinte carbone, entre deux vols Paris-New York."
- "Quand les influenceurs 'authentiques' vendent leur √¢me pour un code promo, mais te parlent d'int√©grit√©."
"""
                
                # Remplacer la variable {subject} dans le prompt utilisateur
                user_content = f"""G√©n√®re une punchline EXTR√äMEMENT cinglante, glaciale et cruelle sur le sujet: **{current_subject}**.

DIRECTIVES STRICTES:
- UTILISE OBLIGATOIREMENT la structure "Quand X fait Y, mais Z fait W" pour exposer une contradiction ou une hypocrisie
- La punchline doit √™tre BRUTALEMENT honn√™te et IMPITOYABLE
- Elle doit √™tre D√âVASTATRICE mais pas trop longue
- Utilise l'ironie la plus MORDANTE, le cynisme le plus NOIR et l'humour le plus GLACIAL
- Frappe l√† o√π √ßa fait VRAIMENT MAL, expose les PIRES contradictions et hypocrisies
- Sois aussi M√âCHANT, FROID et PROVOCATEUR que possible
- Sois D√âLIB√âR√âMENT offensant et choquant - c'est le BUT RECHERCH√â
- Utilise des V√âRIT√âS QUI D√âRANGENT pour cr√©er un malaise profond
- N'aie AUCUNE piti√© ni retenue morale

EXEMPLES DE TON RECHERCH√â:
- "Quand les influenceurs 'body positive' retouchent chaque photo, mais te vendent l'acceptation de soi."
- "Quand les vegans pr√™chent l'√©thique animale, mais ignorent l'exploitation humaine dans leurs plantations de quinoa."
- "Quand les f√©ministes hurlent √† l'√©galit√©, mais s'attendent toujours √† ce que l'homme paie l'addition."

R√©ponds UNIQUEMENT avec la punchline, sans guillemets ni autre texte."""
                model = "gpt-4"
                max_tokens = 100
                temperature = 1.0
            
            # Payload pour la g√©n√©ration de punchlines
            payload = {
                "model": model,
                "messages": [
                    {
                        "role": "system",
                        "content": system_content
                    },
                    {
                        "role": "user",
                        "content": user_content
                    }
                ],
                "max_tokens": max_tokens,
                "temperature": temperature
            }
            
            # Ajouter le contexte si fourni
            if context:
                payload["messages"].append({
                    "role": "user",
                    "content": f"Contexte suppl√©mentaire: {context}"
                })
            
            # Appeler l'API OpenAI avec le payload
            response = self.client.chat.completions.create(**payload)
            
            # Extraire et retourner le texte de la r√©ponse
            return response.choices[0].message.content
        except Exception as e:
            raise Exception(f"Erreur lors de l'appel √† l'API OpenAI: {str(e)}") 
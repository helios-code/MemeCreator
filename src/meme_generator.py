from openai_client import OpenAIClient
from video_processor import VideoProcessor
from telegram_client import TelegramClient

class MemeGenerator:
    def __init__(self):
        self.openai_client = OpenAIClient()
        self.video_processor = VideoProcessor()
        self.telegram_client = TelegramClient()
    
    async def generate_meme(self, custom_text=None, subject=None, economy_mode=None, send_to_telegram=None):
        """
        G√©n√®re un m√®me vid√©o en suivant ces √©tapes:
        1. G√©n√©rer une punchline avec OpenAI GPT-4 (si custom_text n'est pas fourni)
        2. Ajouter la punchline sur la vid√©o template
        3. Exporter la vid√©o avec le texte incrust√©
        4. G√©n√©rer des hashtags et une description pour les r√©seaux sociaux
        5. Envoyer la vid√©o sur Telegram (si configur√©)
        
        Args:
            custom_text (str, optional): Texte personnalis√© √† utiliser au lieu de g√©n√©rer une punchline
            subject (str, optional): Le sujet sur lequel g√©n√©rer une punchline
            economy_mode (bool, optional): Activer le mode √©conomie de tokens
            send_to_telegram (bool, optional): Forcer l'envoi ou non sur Telegram
            
        Returns:
            dict: Informations sur le m√®me g√©n√©r√© (texte et chemin du fichier)
        """
        try:
            # √âtape 1: G√©n√©rer une punchline (si n√©cessaire)
            if custom_text:
                text = custom_text
            else:
                # Utiliser le prompt pr√©d√©fini dans OpenAIClient avec le sujet sp√©cifi√©
                text = await self.openai_client.generate_punchline(subject=subject, economy_mode=economy_mode)
            
            # √âtape 2 & 3: Ajouter le texte sur la vid√©o et l'exporter
            output_path = await self.video_processor.create_meme(text)
            
            # D√©terminer le sujet final (celui fourni ou celui par d√©faut)
            final_subject = subject if subject else self.openai_client.default_subject
            
            # Cr√©er le r√©sultat de base
            result = {
                "text": text,
                "video_path": output_path,
                "subject": final_subject
            }
            
            # √âtape 4: G√©n√©rer des hashtags et une description pour les r√©seaux sociaux
            try:
                # G√©n√©rer les hashtags
                hashtags = await self.openai_client.generate_hashtags(final_subject, text, economy_mode)
                result["hashtags"] = hashtags
                
                # G√©n√©rer la description
                description = await self.openai_client.generate_description(final_subject, text, economy_mode)
                result["description"] = description
                
                print(f"‚úÖ Contenu social g√©n√©r√© avec succ√®s!")
                print(f"üìù Hashtags: {' '.join(hashtags)}")
                print(f"üìù Description: {description}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors de la g√©n√©ration du contenu social: {str(e)}")
                # Utiliser des valeurs par d√©faut
                result["hashtags"] = ["#LARROGANCE", "#meme", "#humour"]
                result["description"] = f"Un regard satirique sur {final_subject}."
            
            # √âtape 5: Envoyer la vid√©o sur Telegram si configur√©
            should_send = send_to_telegram if send_to_telegram is not None else self.telegram_client.auto_send
            if should_send:
                # Cr√©er un message complet avec le sujet, la punchline, la description et les hashtags
                # Format du message pour Telegram (avec formatage Markdown)
                caption = f"*üé≠ L'ARROGANCE!*\n\n"
                caption += f"*Sujet:* {result['subject']}\n\n"
                caption += f"*\"{text}\"*\n\n"
                caption += f"{result['description']}\n\n"
                caption += " ".join(result['hashtags'])
                
                await self.telegram_client.send_video(output_path, caption)
            
            return result
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du m√®me: {str(e)}")
            raise e
    
    async def generate_batch_memes(self, subjects, economy_mode=None, send_to_telegram=None):
        """
        G√©n√®re plusieurs m√®mes √† partir d'une liste de sujets
        
        Args:
            subjects (list): Liste des sujets
            economy_mode (bool, optional): Activer le mode √©conomie de tokens
            send_to_telegram (bool, optional): Forcer l'envoi ou non sur Telegram
            
        Returns:
            list: Liste des r√©sultats de g√©n√©ration de m√®mes
        """
        results = []
        # D√©terminer si on doit envoyer les vid√©os sur Telegram
        should_send = send_to_telegram if send_to_telegram is not None else self.telegram_client.auto_send
        
        for i, subject in enumerate(subjects):
            try:
                print(f"\n[{i+1}/{len(subjects)}] ü§ñ G√©n√©ration d'un m√®me sur le sujet: \"{subject}\"")
                
                # Afficher le mode utilis√©
                if economy_mode:
                    print("üí∞ Mode √©conomie activ√©: utilisation de GPT-3.5-turbo avec un prompt simplifi√©")
                
                # G√©n√©rer le m√®me et l'envoyer imm√©diatement sur Telegram si configur√©
                result = await self.generate_meme(subject=subject, economy_mode=economy_mode, send_to_telegram=should_send)
                
                print(f"‚úÖ M√®me g√©n√©r√© avec succ√®s!")
                print(f"üìù Texte: {result['text']}")
                print(f"üé• Vid√©o: {result['video_path']}")
                
                results.append(result)
            except Exception as e:
                print(f"‚ùå Erreur lors de la g√©n√©ration du m√®me pour le sujet '{subject}': {str(e)}")
                # Continuer avec le sujet suivant
        
        # Nous n'avons plus besoin d'envoyer les vid√©os en batch √† la fin
        # car chaque vid√©o est envoy√©e imm√©diatement apr√®s sa g√©n√©ration
        
        return results 